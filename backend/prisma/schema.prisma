generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  passwordHash   String?
  role           Role           @default(USER)
  phone          String?
  avatar         String?
  isActive       Boolean        @default(true)
  ownerPaid      Boolean        @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bookings       Booking[]
  payments       Payment[]
  adminApprovals Property[]     @relation("AdminApprovals")
  agentProps     Property[]     @relation("AgentProperties")
  properties     Property[]     @relation("OwnerProperties")
  reviews        Review[]
  subscriptions  Subscription[] @relation("OwnerSubscriptions")
  eventsCreated  Event[]

  @@map("users")
}

model SubscriptionPlan {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  type          String         @unique
  price         Float
  durationDays  Int
  maxProperties Int
  features      Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id            Int                @id @default(autoincrement())
  type          String
  price         Float
  features      Json
  isActive      Boolean            @default(true)
  status        SubscriptionStatus @default(ACTIVE)
  paid          Boolean            @default(false)
  maxProperties Int
  expiresAt     DateTime
  cancelledAt   DateTime?
  ownerId       Int
  planId        Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  owner         User               @relation("OwnerSubscriptions", fields: [ownerId], references: [id])
  plan          SubscriptionPlan   @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Property {
  id                Int            @id @default(autoincrement())
  propertyId        Int?           @unique
  title             String
  description       String?
  location          String
  city              String
  country           String
  address           String
  latitude          Float?
  longitude         Float?
  price             Float
  pricePerNight     Boolean        @default(true)
  amenities         Json
  media             Json
  status            PropertyStatus @default(PENDING)
  maxGuests         Int            @default(1)
  bedrooms          Int            @default(1)
  bathrooms         Int            @default(1)
  propertyType      String
  instantBooking    Boolean        @default(false)
  adminNotes        String?
  ownerId           Int?
  agentId           Int?
  adminId           Int?
  cityId            Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  headerRibbonPrice Float?
  headerRibbonText  String?
  initialRating     Float?
  nearbyAttractions Json?
  videos            String[]
  
  // feature flags
  isFeatured Boolean @default(false)
  isPopular  Boolean @default(false)

  // location relations
  regionId      Int?
  destinationId Int?

  bookings    Booking[]
  admin       User?        @relation("AdminApprovals", fields: [adminId], references: [id])
  agent       User?        @relation("AgentProperties", fields: [agentId], references: [id])
  cityRef     City         @relation(fields: [cityId], references: [id])
  owner       User?        @relation("OwnerProperties", fields: [ownerId], references: [id])
  region      Region?      @relation(fields: [regionId], references: [id])
  destination Destination? @relation(fields: [destinationId], references: [id])
  rates       PropertyRate[]
  reviews     Review[]

  @@map("properties")
}

model City {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  country     String
  isPopular   Boolean    @default(false)
  image       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  properties  Property[]

  @@map("cities")
}

model Booking {
  id                 Int           @id @default(autoincrement())
  bookingCode        String        @unique
  userId             Int
  propertyId         Int
  startDate          DateTime
  endDate            DateTime
  nights             Int
  guests             Int           @default(1)
  amount             Float         @default(0)
  totalAmount        Float         @default(0)
  status             BookingStatus @default(PENDING)
  paymentStatus      PaymentStatus @default(PENDING)
  specialRequests    String?
  cancellationReason String?
  cancelledAt        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  property           Property      @relation(fields: [propertyId], references: [id])
  user               User          @relation(fields: [userId], references: [id])
  payments           Payment[]
  reviews            Review[]

  @@map("bookings")
}

model Payment {
  id         Int           @id @default(autoincrement())
  bookingId  Int
  userId     Int
  amount     Float
  currency   String        @default("USD")
  status     PaymentStatus @default(PENDING)
  meta       Json
  refundedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  booking    Booking       @relation(fields: [bookingId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Review {
  id            Int      @id @default(autoincrement())
  propertyId    Int
  userId        Int
  bookingId     Int?
  rating        Int
  comment       String
  isVerified    Boolean  @default(false)
  adminResponse String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  booking       Booking? @relation(fields: [bookingId], references: [id])
  property      Property @relation(fields: [propertyId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

// Platform Events (managed by SUPER_ADMIN)
model Event {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  category       String?
  // Location
  latitude       Float?
  longitude      Float?
  address        String?
  city           String?
  state          String?
  country        String?
  // Time
  startDateTime  DateTime
  endDateTime    DateTime
  timezone       String?
  // Media & tags
  images         String[]
  tags           String[]

  createdBy      Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdByUser  User      @relation(fields: [createdBy], references: [id])

  @@map("events")
}

model PropertyRate {
  id         Int      @id @default(autoincrement())
  propertyId Int
  category   String?
  startDate  DateTime
  endDate    DateTime
  rate       Float
  minStay    Int?     @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("property_rates")
}

model Region {
  id          Int     @id @default(autoincrement())
  name        String  @unique // e.g., "North America", "Caribbean", "United States of America"
  slug        String  @unique // e.g., "north-america", "caribbean", "usa"
  description String?
  image       String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  // Hierarchical structure
  parentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  parent   Region?  @relation("RegionHierarchy", fields: [parentId], references: [id])
  children Region[] @relation("RegionHierarchy")
  destinations Destination[]
  properties Property[]

  @@map("regions")
}

model Destination {
  id          Int     @id @default(autoincrement())
  name        String  // e.g., "Canada Vacation Rentals", "Alabama Vacation Rentals"
  slug        String  @unique // e.g., "canada-vacation-rentals", "alabama-vacation-rentals"
  description String?
  image       String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  propertyCount Int   @default(0) // Cached count of properties in this destination
  
  // relations
  region     Region     @relation(fields: [regionId], references: [id])
  regionId   Int
  properties Property[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("destinations")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AGENT
  OWNER
  USER
}

enum PropertyStatus {
  PENDING
  LIVE
  REJECTED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

// Binary media storage in DB (replacing S3)
model MediaFile {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  mimeType  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())

  @@map("media_files")
}

// One-time upload tokens to emulate presigned uploads
model UploadToken {
  token     String   @id
  key       String
  mimeType  String
  // Optional expected size; not enforced at DB level
  size      Int?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("upload_tokens")
}

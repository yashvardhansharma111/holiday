generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AGENT
  OWNER
  USER
}

enum PropertyStatus {
  PENDING
  LIVE
  REJECTED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String?
  role         Role      @default(USER)
  phone        String?
  avatar       String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?

  // relations
  properties   Property[] @relation("OwnerProperties")
  agentProps   Property[] @relation("AgentProperties")
  bookings     Booking[]
  reviews      Review[]
  subscriptions Subscription[] @relation("OwnerSubscriptions")
  payments     Payment[]
  adminApprovals Property[] @relation("AdminApprovals")
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("users")
}

model SubscriptionPlan {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  type          String   @unique
  price         Float
  durationDays  Int      // Duration in days
  maxProperties Int      // Maximum properties allowed
  features      Json     // JSONB (document-like)
  isActive      Boolean  @default(true)
  
  // relations
  subscriptions Subscription[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("subscription_plans")
}

model Subscription {
  id                  Int                @id @default(autoincrement())
  type                String
  price               Float
  features            Json               // JSONB (document-like)
  isActive            Boolean            @default(true)
  status              SubscriptionStatus @default(ACTIVE)
  paid                Boolean            @default(false)
  maxProperties       Int
  expiresAt           DateTime
  cancelledAt         DateTime?
  
  // relations
  owner               User               @relation("OwnerSubscriptions", fields: [ownerId], references: [id])
  ownerId             Int
  plan                SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId              Int
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@map("subscriptions")
}

model Property {
  id          Int             @id @default(autoincrement())
  propertyId  Int?            @unique // 1000 + id (set in code)
  title       String
  description String?
  location    String
  city        String
  country     String
  address     String
  latitude    Float?
  longitude   Float?
  price       Float
  pricePerNight Boolean       @default(true)
  amenities   Json            // JSONB (e.g., {wifi:true, pool:false})
  media       Json            // JSONB (images/videos metadata)
  status      PropertyStatus  @default(PENDING)
  maxGuests   Int             @default(1)
  bedrooms    Int             @default(1)
  bathrooms   Int             @default(1)
  propertyType String         // apartment, house, villa, etc.
  instantBooking Boolean      @default(false)
  adminNotes  String?

  // relations
  owner       User?           @relation("OwnerProperties", fields: [ownerId], references: [id])
  ownerId     Int?
  agent       User?           @relation("AgentProperties", fields: [agentId], references: [id])
  agentId     Int?
  admin       User?           @relation("AdminApprovals", fields: [adminId], references: [id])
  adminId     Int?

  bookings    Booking[]
  reviews     Review[]
  cityRef     City            @relation(fields: [cityId], references: [id])
  cityId      Int

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("properties")
}

model City {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  country    String
  isPopular  Boolean   @default(false)
  image      String?
  description String?
  
  // relations
  properties Property[]
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("cities")
}

model Booking {
  id            Int           @id @default(autoincrement())
  bookingCode   String        @unique // Unique booking reference
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  property      Property      @relation(fields: [propertyId], references: [id])
  propertyId    Int
  startDate     DateTime
  endDate       DateTime
  nights        Int           // Calculated field
  guests        Int           @default(1)
  amount        Float         @default(0)
  totalAmount   Float         @default(0) // Including fees
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  specialRequests String?
  cancellationReason String?
  cancelledAt   DateTime?
  
  // relations
  payments      Payment[]
  reviews      Review[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("bookings")
}

model Payment {
  id         Int       @id @default(autoincrement())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  amount     Float
  currency   String   @default("USD")
  status     PaymentStatus @default(PENDING)
  meta       Json     // JSONB for payment details
  refundedAt DateTime?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("payments")
}

model Review {
  id         Int       @id @default(autoincrement())
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  booking    Booking?  @relation(fields: [bookingId], references: [id])
  bookingId  Int?
  rating     Int       // 1-5 stars
  comment    String
  isVerified Boolean   @default(false) // Verified booking
  adminResponse String? // Admin response to review
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("reviews")
}
